<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Console.DefaultConverters</name>
    </assembly>
    <members>
        <member name="T:Console.DefaultConverters.ColorConverter">
            <summary>
            AConverter Implementation that Converts a RRGGBB or AARRGGBB hex string into a C# Color Struct if Prepended with a Hashtag
            If a Hashtag is not present the color gets interpreted by name(e.g. Red == FFFF0000 OR FF0000)
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.ColorConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="M:Console.DefaultConverters.ColorConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
        <member name="M:Console.DefaultConverters.ColorConverter.Convert(System.String)">
            <summary>
            Converts the Hex Code into a byte
            </summary>
            <param name="hexCode"></param>
            <returns></returns>
        </member>
        <member name="T:Console.DefaultConverters.DateTimeConverter">
            <summary>
            AConverter Implementation that converts from DateTime structs to string representations and from string representations to DateTime Structs
            </summary>
        </member>
        <member name="F:Console.DefaultConverters.DateTimeConverter.DateTimeCulture">
            <summary>
            Culture that is used when converting
            </summary>
        </member>
        <member name="F:Console.DefaultConverters.DateTimeConverter.DateTimeFormat">
            <summary>
            The Format string that is used when converting from DateTime To String.
            </summary>
        </member>
        <member name="P:Console.DefaultConverters.DateTimeConverter.Culture">
            <summary>
            Helper Property that provides the CultureInstance
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.DateTimeConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
        <member name="M:Console.DefaultConverters.DateTimeConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="T:Console.DefaultConverters.DefaultConverterInitializer">
            <summary>
            Initializer of the DefaultConverters Extension
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.DefaultConverterInitializer.ListEnumValues(System.String)">
            <summary>
            Prints all Values of an Enum to the Console.
            </summary>
            <param name="qualifiedName"></param>
        </member>
        <member name="P:Console.DefaultConverters.DefaultConverterInitializer.EnvVersion">
            <summary>
            Version of the DefaultConverters Extension
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.DefaultConverterInitializer.Initialize">
            <summary>
            Initialization Function
            </summary>
        </member>
        <member name="T:Console.DefaultConverters.DirInfoConverter">
            <summary>
            AConverter Implementation that converts a Path String into a DirectoryInfo class.
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.DirInfoConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="M:Console.DefaultConverters.DirInfoConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
        <member name="T:Console.DefaultConverters.EnumConverter">
            <summary>
            AConverter Implementation that converts the name of an enum to the corresponding enum value
            </summary>
        </member>
        <member name="F:Console.DefaultConverters.EnumConverter.CaseSensitive">
            <summary>
            Flag that if set to true will Parse the Names in case sensitive.
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.EnumConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="M:Console.DefaultConverters.EnumConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
        <member name="T:Console.DefaultConverters.EnumDigitConverter">
            <summary>
            AConverter Implementation that converts an Integer into the corresponding Enum Value
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.EnumDigitConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="M:Console.DefaultConverters.EnumDigitConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
        <member name="T:Console.DefaultConverters.FileInfoConverter">
            <summary>
            AConverter Implementation that converts a Path String into a FileInfo Class.
            </summary>
        </member>
        <member name="M:Console.DefaultConverters.FileInfoConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns true when the Converter is Able to Convert the parameter into the target type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>True if the conversion can be done</returns>
        </member>
        <member name="M:Console.DefaultConverters.FileInfoConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the Parameter into the Target Type
            </summary>
            <param name="parameter">Parameter Value</param>
            <param name="target">Target Type</param>
            <returns>Converted Value</returns>
        </member>
    </members>
</doc>
