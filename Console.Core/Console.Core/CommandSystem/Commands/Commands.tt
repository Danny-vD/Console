<#@template debug = "false" hostspecific = "false" language = "C#" #>
    <#@output extension = ".cs" #>
        <#@Assembly Name = "System.Core" #>
            <#@Import Namespace = "System" #>
                <#@Import Namespace = "System.Collections.Generic" #>
                    <#@Import Namespace = "System.Linq" #>
                        <#@Import Namespace = "System.Runtime.InteropServices" #>


						      
using System;
	
namespace Console.Core.CommandSystem.Commands
{
<#

//Type Definitions
int CommandCount = 18;
string className = "Command";
string[] func = new string[CommandCount];
string[] funcDef = new string[CommandCount];
string[] classDef = new string[CommandCount];
string[] fullNameImpl = new string[CommandCount];
string[] invokeCall = new string[CommandCount];
string[] invokeImpl = new string[CommandCount];
	
	for(int cc = 1; cc < CommandCount; cc++)
	{
	func[cc] = "Action";
	if(cc != 1)
		func[cc]+="<";
	for(int i = 1; i < cc; i++)
	{
		func[cc]+="TParam"+(i-1);
		if(i != cc -1)
			func[cc]+=", ";

	}
	
	if(cc != 1)
		func[cc] += ">";
	
	funcDef[cc] = "private readonly " + func[cc] + " callback;";

	classDef[cc] = "public class "+className;
	if(cc!=1)classDef[cc]+="<";
	for(int i = 1; i < cc; i++)
	{
		classDef[cc]+="TParam"+(i-1);
		if(i != cc -1)
		classDef[cc]+=", ";
	}
	
	if(cc!=1)classDef[cc]+=">";
	classDef[cc] += " : AbstractCommand";


	string fullNameTypeImpl = "typeof({0}).Name";
	fullNameImpl[cc] = "{Name} ";
	for(int i = 1; i < cc; i++)
	{
		fullNameImpl[cc] += "{"+ string.Format(fullNameTypeImpl, "TParam"+(i-1))+"}";
		if(i != cc - 1)
			fullNameImpl[cc] += ", ";
	}

	invokeImpl[cc] = "";
	for(int i = 1; i < cc; i++)
	{
		string invokeImplIf = "\t\t\tif(!IsValidCast<TParam" + (i-1) + ">(parameters[" + (i-1) + "])) throw new InvalidCastException(\"Invalid Cast Parameter: " + (i-1) + "\");\n";
		invokeImpl[cc]+=invokeImplIf;
	}

	invokeCall[cc] = "callback.Invoke(";
	for(int i = 1; i < cc; i++)
	{
		string invokeCallParam = "\n\t\t\t\tConvertTo<TParam"+(i-1)+">(parameters["+(i-1)+"])";
		if(i != cc - 1)invokeCallParam+=", ";
		invokeCall[cc]+= invokeCallParam;
	}
	invokeCall[cc]+= "\n\t\t\t);";
#>
	/// <summary>
	/// Command Implementation with <#=cc-1#> Parameter(s)
	/// </summary>
	<#= classDef[cc] #>
	{
		<#= funcDef[cc] #>

		/// <summary>
        /// Creates a New Command.
        /// </summary>
        /// <param name="name">Name of the Command</param>
        /// <param name="commandCallback">The Callback with <#=cc-1#> Parameter(s) that gets invoked when the command is executed.</param>
		public <#=className#>(string name, <#= func[cc] #> commandCallback) : base(<#=cc-1#>)
		{
			Name = name;
			callback = commandCallback;
		}

		
        /// <summary>
        /// Returns the name, plus all the parameter types
        /// </summary>
        /// <returns>The Full Name including Signature</returns>
		public override string GetFullName()
		{
			return $"<#= fullNameImpl[cc] #>";
		}

		/// <summary>
        /// Invokes this Command with the specified parameters.
        /// </summary>
        /// <param name="parameters">Parameters of the Command.</param>
		public override void Invoke(params object[] parameters)
		{
<#= invokeImpl[cc] #>
			<#= invokeCall[cc] #>
		}
	}



<#

	}


#>

}